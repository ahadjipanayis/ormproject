# Generated by Django 5.0.7 on 2025-03-03 01:51

import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppLicense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expiration_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='BpmnDiagram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('xml_content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='Counterparty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('counterparty_type', models.CharField(choices=[('CLIENT', 'Client'), ('SUPPLIER', 'Supplier')], default='CLIENT', max_length=10)),
                ('entity_type', models.CharField(choices=[('LEGAL_ENTITY', 'Legal Entity'), ('INDIVIDUAL', 'Individual')], default='LEGAL_ENTITY', max_length=15)),
                ('street_address', models.CharField(blank=True, help_text='Street and house number', max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('is_sanctioned', models.BooleanField(default=False, help_text='Indicates if the counterparty is flagged as sanctioned')),
                ('sanction_source', models.CharField(blank=True, help_text='The source of the sanction (e.g., OFAC, UNSC, EU)', max_length=255, null=True)),
                ('sanction_created_at', models.DateField(blank=True, help_text='Date the sanction was applied or recorded', null=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('response_received', models.BooleanField(default=False)),
                ('response_at', models.DateTimeField(blank=True, null=True)),
                ('user_selected_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField()),
                ('field', models.CharField(blank=True, max_length=100, null=True)),
                ('repetition_frequency', models.CharField(blank=True, choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('semiannual', 'Semi-Annual'), ('annual', 'Annual')], max_length=20, null=True)),
                ('current_value', models.FloatField()),
                ('reporting_date', models.DateField()),
                ('next_reporting_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ITThreat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Threat code (e.g., TP01)', max_length=10, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the threat')),
                ('risk_sources', models.CharField(help_text="Comma-separated risk source types (e.g., 'A, D, E')", max_length=20)),
                ('category', models.CharField(choices=[('physical', 'Physical Threats'), ('natural', 'Natural Threats'), ('infrastructure', 'Infrastructure Failures'), ('technical', 'Technical Failures'), ('human', 'Human Actions'), ('compromise', 'Compromise of Functions or Services'), ('organizational', 'Organizational Threats')], help_text='Category of the threat (ISO/IEC 27005:2022)', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='KYCQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('weight', models.FloatField(help_text='Weight of this question in scoring')),
                ('score_1_description', models.TextField(default='Very Low', help_text='Description for score 1')),
                ('score_2_description', models.TextField(default='Low', help_text='Description for score 2')),
                ('score_3_description', models.TextField(default='Medium', help_text='Description for score 3')),
                ('score_4_description', models.TextField(default='High', help_text='Description for score 4')),
                ('score_5_description', models.TextField(default='Very High', help_text='Description for score 5')),
            ],
        ),
        migrations.CreateModel(
            name='KYCStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NetworkScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('ports_open', models.TextField()),
                ('scan_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', tinymce.models.HTMLField()),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_id', models.CharField(max_length=50)),
                ('type', models.CharField(max_length=255)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ReportAndDashboardPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('can_view_reports', 'Can view reports'), ('can_view_dashboard', 'Can view dashboard')],
            },
        ),
        migrations.CreateModel(
            name='SanctionList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('ref_id', models.CharField(max_length=50, unique=True)),
                ('source_url', models.URLField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SMTPSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smtp_server', models.CharField(max_length=255)),
                ('smtp_port', models.IntegerField()),
                ('smtp_username', models.CharField(max_length=255)),
                ('smtp_password', models.CharField(max_length=255)),
                ('sender_email', models.EmailField(max_length=254)),
                ('admin_email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='StandardControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clause', models.CharField(max_length=100)),
                ('standard_name', models.CharField(max_length=1000)),
                ('control_id', models.CharField(max_length=10)),
                ('control_name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('globally_applicable', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='documents/versions/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('version_number', models.IntegerField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='orm.document')),
            ],
        ),
        migrations.CreateModel(
            name='DueDiligenceAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateTimeField(auto_now_add=True)),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('overall_score', models.FloatField(default=0.0, editable=False)),
                ('classification', models.CharField(blank=True, choices=[('Low Risk', 'Low Risk'), ('Medium Risk', 'Medium Risk'), ('High Risk', 'High Risk')], max_length=50, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=50)),
                ('counterparty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.counterparty')),
                ('standard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.kycstandard')),
            ],
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='orm.folder')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='folder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='orm.folder'),
        ),
        migrations.CreateModel(
            name='IndicatorValueHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='value_history', to='orm.indicator')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_value', models.IntegerField(help_text='Select a response score')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='orm.duediligenceassessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.kycquestion')),
            ],
        ),
        migrations.AddField(
            model_name='kycquestion',
            name='standard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='orm.kycstandard'),
        ),
        migrations.CreateModel(
            name='LikelihoodImpactDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('likelihood', 'Likelihood'), ('impact', 'Impact')], help_text='Specify whether this description is for likelihood or impact.', max_length=10)),
                ('score', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Score value (1-5).')),
                ('description', models.TextField(help_text='Description for the score.')),
            ],
            options={
                'verbose_name': 'Likelihood/Impact Description',
                'verbose_name_plural': 'Likelihood/Impact Descriptions',
                'unique_together': {('category', 'score')},
            },
        ),
        migrations.CreateModel(
            name='Opportunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('description', models.CharField(blank=True, max_length=5000)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='Mitigation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', tinymce.models.HTMLField()),
                ('description', tinymce.models.HTMLField()),
                ('effectiveness', models.CharField(choices=[('not_tested', 'Not Tested'), ('ineffective', 'Ineffective'), ('partially_effective', 'Partially Effective'), ('effective', 'Effective')], default='not_tested', max_length=50)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='ITAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('asset_type', models.CharField(choices=[('hardware', 'Hardware'), ('software', 'Software'), ('network', 'Network Component'), ('data', 'Data'), ('service', 'Service'), ('other', 'Other')], max_length=50)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('decommissioned', 'Decommissioned')], default='active', max_length=20)),
                ('criticality', models.PositiveIntegerField(default=1)),
                ('confidentiality', models.PositiveSmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], default=1)),
                ('integrity', models.PositiveSmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], default=1)),
                ('availability', models.PositiveSmallIntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], default=1)),
                ('date_added', models.DateField(auto_now_add=True)),
                ('last_updated', models.DateField(auto_now=True)),
                ('threats', models.ManyToManyField(blank=True, help_text='IT threats that this IT asset is exposed to', related_name='assets', to='orm.itthreat')),
                ('portfolio', models.ForeignKey(blank=True, help_text='Portfolio associated with this IT asset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='orm.portfolio')),
            ],
        ),
        migrations.AddField(
            model_name='indicator',
            name='portfolio',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField()),
                ('date', models.DateField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='portfolio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.portfolio'),
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('description', tinymce.models.HTMLField()),
                ('deadline', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100)),
                ('revision', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField()),
                ('url', models.URLField(blank=True, null=True)),
                ('department', models.CharField(max_length=100)),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_assessed_date', models.DateTimeField(blank=True, null=True)),
                ('next_assessment_date', models.DateTimeField(blank=True, null=True)),
                ('last_approval_date', models.DateTimeField(blank=True, null=True)),
                ('next_approval_date', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approval_cycle', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('biannual', 'Biannual')], default='biannual', max_length=10, verbose_name='Approval Cycle')),
                ('title', tinymce.models.HTMLField()),
                ('description', tinymce.models.HTMLField()),
                ('inherent_likelihood', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=5, null=True)),
                ('inherent_impact', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=5, null=True)),
                ('residual_likelihood', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=3, null=True)),
                ('residual_impact', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=3, null=True)),
                ('targeted_likelihood', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=1, null=True)),
                ('targeted_impact', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=1, null=True)),
                ('treatment_type', models.CharField(blank=True, choices=[('acceptance', 'Acceptance'), ('mitigation', 'Mitigation'), ('transfer', 'Transfer'), ('avoidance', 'Avoidance')], default='mitigation', max_length=50, null=True)),
                ('actions', models.ManyToManyField(blank=True, related_name='risks', to='orm.action')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.category')),
                ('events', models.ManyToManyField(blank=True, related_name='risks', to='orm.event')),
                ('indicators', models.ManyToManyField(blank=True, related_name='risks', to='orm.indicator')),
                ('mitigations', models.ManyToManyField(related_name='risks', to='orm.mitigation')),
                ('opportunities', models.ManyToManyField(blank=True, related_name='risks', to='orm.opportunity')),
                ('portfolio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
                ('procedures', models.ManyToManyField(blank=True, related_name='risks', to='orm.procedure')),
                ('related_assets', models.ManyToManyField(blank=True, help_text='IT assets impacted by this risk.', related_name='risks', to='orm.itasset')),
            ],
            options={
                'permissions': [('view_risk_report', 'Can view the risk report')],
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', tinymce.models.HTMLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('risks', models.ManyToManyField(related_name='assessments', to='orm.risk')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('risk_assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_history', to='orm.riskassessment')),
            ],
        ),
        migrations.CreateModel(
            name='RiskScoreHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_type', models.CharField(max_length=50)),
                ('score', models.IntegerField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('risk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_history', to='orm.risk')),
            ],
        ),
        migrations.CreateModel(
            name='RiskSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('inherent_score', models.IntegerField()),
                ('residual_score', models.IntegerField()),
                ('targeted_score', models.IntegerField()),
                ('assessment_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_snapshots', to='orm.assessmenthistory')),
            ],
        ),
        migrations.CreateModel(
            name='CounterpartySanctionCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Not Found', 'Not Found'), ('Listed', 'Listed')], default='Not Found', max_length=50)),
                ('check_date', models.DateTimeField(auto_now_add=True)),
                ('counterparty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sanction_checks', to='orm.counterparty')),
                ('sanction_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.sanctionlist')),
            ],
        ),
        migrations.CreateModel(
            name='Threat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('description', models.CharField(blank=True, max_length=5000)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.portfolio')),
            ],
        ),
        migrations.AddField(
            model_name='risk',
            name='threats',
            field=models.ManyToManyField(blank=True, related_name='risks', to='orm.threat'),
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('page_view', 'Page View')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('page_accessed', models.CharField(blank=True, max_length=300, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('referrer', models.CharField(blank=True, max_length=500, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=200)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('portfolios', models.ManyToManyField(related_name='user_profiles', to='orm.portfolio')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='threat',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_threats', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='riskassessment',
            name='assessor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='riskassessment',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assessments', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='risk',
            name='last_approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_appoved_risks', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='risk',
            name='last_assessed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_assessed_risks', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='risk',
            name='owners',
            field=models.ManyToManyField(related_name='owned_risks', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='procedure',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_procedures', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='opportunity',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_opportunities', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='mitigation',
            name='owners',
            field=models.ManyToManyField(related_name='owned_mitigations', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='itasset',
            name='owners',
            field=models.ManyToManyField(blank=True, help_text='Users who own this IT asset', related_name='owned_assets', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_indicators', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='event',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_events', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='event',
            name='reporter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_events', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='duediligenceassessment',
            name='performed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='assessmenthistory',
            name='assessor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='orm.userprofile'),
        ),
        migrations.CreateModel(
            name='ApprovalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rational', tinymce.models.HTMLField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], max_length=50)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('risk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_requests', to='orm.risk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orm.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='action',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_actions', to='orm.userprofile'),
        ),
        migrations.AddField(
            model_name='action',
            name='performer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_actions', to='orm.userprofile'),
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Vulnerability code (e.g., VH01)', max_length=10, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the vulnerability')),
                ('category', models.CharField(choices=[('hardware', 'Hardware'), ('software', 'Software'), ('network', 'Network'), ('personnel', 'Personnel'), ('site', 'Site'), ('organization', 'Organization')], help_text='Category of the vulnerability', max_length=20)),
                ('threats', models.ManyToManyField(blank=True, help_text='IT threats that can exploit this vulnerability', related_name='vulnerabilities', to='orm.itthreat')),
            ],
        ),
        migrations.AddField(
            model_name='itasset',
            name='vulnerabilities',
            field=models.ManyToManyField(blank=True, help_text='Vulnerabilities affecting this IT asset', related_name='assets', to='orm.vulnerability'),
        ),
        migrations.CreateModel(
            name='PortfolioControlStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicable', models.BooleanField(default=True)),
                ('rationale', models.TextField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='control_statuses', to='orm.portfolio')),
                ('standard_control', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_statuses', to='orm.standardcontrol')),
            ],
            options={
                'unique_together': {('portfolio', 'standard_control')},
            },
        ),
    ]
